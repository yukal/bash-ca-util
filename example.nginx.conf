# Filename: example.nginx.conf (or domain.loc.conf)

# This configuration file provides examples for running multiple subdomains
# with different purposes (redirect, static, development, API) under HTTPS
# using certificates generated by 'bash-util-ca'.
#
# Remember to replace 'domain.loc' with your actual domain name and
# adjust IP addresses and file paths as needed.

# --- domain.loc HTTP to HTTPS Redirect ---
# This block listens for HTTP traffic on port 80
server {
    listen 127.0.0.1:80;
    # listen [::]:80; # IPv6

    server_name domain.loc www.domain.loc;

    # Redirect all HTTP traffic to the corresponding HTTPS domain
    # $host is the hostname received in the request (domain.loc or www.domain.loc)
    return 301 https://$host$request_uri;
}


# .......................................................
# img.domain.loc - Static Images

server {
    listen 127.0.0.1:443 ssl;
    server_name  img.domain.loc;

    # --- SSL/TLS Configuration for img.domain.loc ---
    ssl_certificate     /var/www/domain.loc/.ssl/domain.loc.crt;
    ssl_certificate_key /var/www/domain.loc/.ssl/domain.loc.key;

    include snippets/ssl.conf;
    ssl_session_tickets off;

    location / {
        alias /var/www/domain.loc/img/;

        # Caching settings for static files (30 days)
        expires 30d;
        log_not_found off;

        # Prevent headers that might interfere with caching
        add_header Cache-Control "public, max-age=2592000, immutable" always;
    }

    include snippets/deny_files.conf;
    include snippets/error_pages.conf;
}


# .......................................................
# domain.loc - Frontend (Vue + Vite) Static Files

server {
    # Listen on port 443 for HTTPS
    # listen [::]:443 ssl; # IPv6
    listen 127.0.0.1:443 ssl;

    server_name  domain.loc www.domain.loc;

    access_log  /var/log/nginx/domain/web-access.log main;
    error_log   /var/log/nginx/domain/web-error.log error;

    # --- SSL/TLS configuration for the server (domain.loc) ---
    ssl_certificate     /var/www/domain.loc/.ssl/domain.loc.crt;
    ssl_certificate_key /var/www/domain.loc/.ssl/domain.loc.key;

    # Recommended SSL/TLS security settings
    include snippets/ssl.conf;
    ssl_session_tickets off;

    location / {
        root   /var/www/domain.loc/html;
        index  index.html index.htm;

        try_files $uri $uri/ /index.html;
        # try_files $uri $uri/ =404;
    }

    include snippets/deny_files.conf;

    # redirect server error pages using the default static files (40x, 50x):
    include snippets/error_pages.conf;
}


# .......................................................
# dev.domain.loc - Frontend (Vue + Vite) for Development

server {
    listen 127.0.0.1:443 ssl;
    server_name  dev.domain.loc;

    access_log  /var/log/nginx/domain/dev-access.log main;
    error_log   /var/log/nginx/domain/dev-error.log error;

    # --- SSL/TLS configuration for the server (domain.loc) ---
    ssl_certificate     /var/www/domain.loc/.ssl/domain.loc.crt;
    ssl_certificate_key /var/www/domain.loc/.ssl/domain.loc.key;

    # Recommended SSL/TLS security settings
    include snippets/ssl.conf;
    ssl_session_tickets off;

    location /img/ {
        alias /var/www/domain.loc/img/;
        expires 30d;
        log_not_found off;
    }

    # --- Proxying to Vite Dev Server ---
    location / {
        # Everything not handled by other locations goes to Vite
        proxy_pass http://localhost:5800;

        # Settings for Hot Module Replacement (HMR) (uses WebSocket)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host; # Pass the original host
    }

    # include snippets/deny_files.conf;

    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }

    # Here we deny only files ending with ~ (if needed for Dev)
    location ~ ~$ {
        access_log off;
        log_not_found off;
        deny all;
    }

    # redirect server error pages using the default static files (40x, 50x):
    include snippets/error_pages.conf;
}


# .......................................................
# api.domain.loc - Backend

server {
    listen 127.0.0.1:443 ssl;
    # listen 192.168.1.101:443 ssl;
    # listen [::]:443 ssl; # IPv6

    server_name  api.domain.loc; # Domain name for the API

    access_log  /var/log/nginx/domain/api-access.log main;
    error_log   /var/log/nginx/domain/api-error.log error;

    # --- SSL/TLS configuration for the server (api.domain.loc) ---
    ssl_certificate     /var/www/domain.loc/.ssl/domain.loc.crt;
    ssl_certificate_key /var/www/domain.loc/.ssl/domain.loc.key;

    # Recommended SSL/TLS security settings
    include snippets/ssl.conf;

    # Overriding for API
    ssl_session_tickets on;

    # ssl_stapling on; # Uncomment if you get warnings and have configured an OCSP responder
    # ssl_stapling_verify on; # Uncomment if you get warnings

    # --- Client Certificate Authentication ---
    # Path to your CA root certificate (ca.crt) that signed the client certificates
    # Nginx will use it to verify client certificates
    ssl_client_certificate /etc/pki/ca-trust/source/anchors/homeworks-ca.crt;

    # Require a client certificate for API access
    ssl_verify_client on;

    # Certificate verification depth
    # Can be 1 or 2 depending on your CA hierarchy
    #   0 - only the root CA
    #   1 - for direct CA signing
    ssl_verify_depth 2;

    # If the certificate is revoked (requires CRL/OCSP setup)
    # ssl_crl /etc/nginx/ssl/ca.crl; # Path to the CRL list if you are using it

    # /api/
    location / {
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Important for the backend to know it's HTTPS
        proxy_set_header X-Forwarded-Proto $scheme;

        # testing custom value header (useful in debug mode)
        proxy_set_header X-Test-Header "HelloFromNginx";

        # Pass client certificate information to your server.
        # The server can receive and use these headers for authorization.
        # This allows your application to know exactly who connected.
        proxy_set_header X-SSL-Client-Cert-DN $ssl_client_s_dn;        # Client's Distinguished Name
        proxy_set_header X-SSL-Client-Cert-Serial $ssl_client_serial;  # Certificate Serial Number
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;       # Certificate verification status (SUCCESS/FAILED)

        # Additional headers with client certificate info:
        proxy_set_header X-SSL-Client-Issuer-DN $ssl_client_i_dn;
        proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;  # MD5

        # Prevent API response caching
        proxy_no_cache $http_pragma $http_authorization;
        proxy_cache_bypass $http_pragma $http_authorization;

        proxy_pass http://localhost:58000;
    }

    include snippets/deny_files.conf;

    # redirect server error pages using the default static files (40x, 50x):
    include snippets/error_pages.conf;
}